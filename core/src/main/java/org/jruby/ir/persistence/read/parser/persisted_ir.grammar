%package "org.jruby.ir.persistence.read.parser";

%import "org.jruby.ir.IRScope";

%import "org.jruby.ir.instructions.Instr";

%import "org.jruby.ir.operands.Operand";

%import "org.jruby.ir.persistence.read.parser.dummy.InstrWithParams";

%class "PersistedIRParser";

%terminals BOOLEAN, ID, STRING, FIXNUM, FLOAT;
%terminals EOLN;
%terminals EQ;
%terminals COMMA, LBRACE, RBRACE, LPAREN, RPAREN, GT, LT, LBRACK, RBRACK;
%terminals DEAD_RESULT_INSTR_MARKER, DEAD_INSTR_MARKER;
%terminals NULL;

%typeof STRING, ID, FIXNUM, FLOAT, BOOLEAN = "String";
%typeof parameter_list, list = "ArrayList<Object>";
%typeof instruction_list = "ArrayList<Instr>";
%typeof operand = "Operand";
%typeof abstract_instruction = "Instr";
%typeof param, NULL = "Object";

%typeof scope_info, scope_descriptor = "IRScope";

%typeof instr_with_params = "InstrWithParams";

%goal scopes;

%embed {:

    private PersistedIRParserLogic logic;

    public void init(IRParsingContext context) {
        logic = new PersistedIRParserLogic(context);
    }

:} ;

scopes
    =    scopes_info.scope EOLN
         scopes_instructions.instrs     {: return logic.getToplevelScope(); :}
    ;

scopes_info
    =    scope_info EOLN
    |    scopes_info scope_info EOLN
    ;

/* Info that is needed to recreate a scope itself, do not contain instructions */
scope_info
    =    ID.type LT parameter_list.params GT
                                        {: return logic.createScope(type, params); :}
    ;

scopes_instructions
    =    scope_instructions EOLN
    |    scopes_instructions scope_instructions EOLN
    ;

scope_instructions
    =    scope_descriptor.scope EOLN
         instruction_list.instrs        {: return logic.addToScope(scope, instrs); :}
    ;

scope_descriptor
    =    STRING.name                    {: return logic.enterScope(name); :}
    ;

/* Instructions */
instruction_list
    =    abstract_instruction.i EOLN    {: return logic.addFirstInstruction(i); :}
    |    instruction_list.lst abstract_instruction.i EOLN
                                        {: return logic.addFollowingInstructions(lst, i, _symbol_lst); :}

    ;

abstract_instruction
    =    instruction.instr DEAD_INSTR_MARKER.marker?
                                        {: return logic.markAsDeadIfNeeded(instr, marker); :}
    ;

instruction
    =    simple_instr
    |    abstract_result_instr
    ;

simple_instr
    =    ID.id                          {: return logic.createInstrWithoutParams(id); :}
    |    instr_with_params.instr        {: return logic.createInstrWithParams(instr); :}
    ;

abstract_result_instr
    =    result_instr.instr DEAD_RESULT_INSTR_MARKER.marker?
                                        {: return logic.markHasUnusedResultIfNeeded(instr, marker); :}
    ;

result_instr
    =    operand.var EQ ID.id
                                        {: return logic.createReturnInstrWithNoParams(var, id); :}
    |    operand.var EQ instr_with_params.instr
                                        {: return logic.createReturnInstrWithParams(var, instr); :}
    ;

instr_with_params
    =    ID.id LPAREN parameter_list.list RPAREN
                                        {: return logic.createInstrWithParams(id, list); :}
    ;

/* Parameters of instruction */
parameter_list
    =    param.p1
    |    parameter_list.list COMMA param.p
    ;

param
    =    operand
    |    FIXNUM.val
    |    FLOAT.val
    |    BOOLEAN.bool
    |    list
    |    STRING
    |    NULL                           {: return logic.createNull(); :}
    ;

list
    =    LBRACK parameter_list.params? RBRACK
                                        {: return logic.createList(params); :}
    ;

/* Operands */
operand
    =  operand_without_parameters
    |  operand_with_parameters
    ;

operand_without_parameters
    =  ID.id                            {: return logic.createOperandWithoutParameters(id); :}
    ;

operand_with_parameters
    =  ID.id LBRACE parameter_list.params RBRACE
                                        {: return logic.createOperandWithParameters(id, params); :}
    ;
